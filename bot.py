import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (Application, CommandHandler, ContextTypes,
                          MessageHandler, filters, ConversationHandler, CallbackQueryHandler)
from datetime import datetime, timedelta

BOT_TOKEN = "7767900402:AAHsRjDChEL83frntnxkN3coswjP9sbX0Rg"
ADMIN_ID = 5676657478
BOOKINGS_FILE = "bookings.json"

NAME, GUESTS, DATE, TIME, PHONE = range(5)

try:
    with open(BOOKINGS_FILE, "r", encoding="utf-8") as f:
        bookings = json.load(f)
except FileNotFoundError:
    bookings = []

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üåø *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–ª—å—è–Ω–Ω—É—é –¢–∞–π–≥–∞ Family!* üåø\n\n"
        "–ß—Ç–æ–±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫, –Ω–∞–∂–º–∏—Ç–µ /book",
        parse_mode="Markdown"
    )

async def book(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üë§ *–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?*", parse_mode="Markdown")
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("üë• *–°–∫–æ–ª—å–∫–æ –≥–æ—Å—Ç–µ–π?*", parse_mode="Markdown")
    return GUESTS

async def get_guests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["guests"] = update.message.text
    await show_calendar(update, context)
    return DATE

async def show_calendar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = datetime.now()
    keyboard = []
    for i in range(7):
        day = today + timedelta(days=i)
        button = InlineKeyboardButton(
            text=day.strftime("üìÖ %d.%m.%Y (%a)"),
            callback_data=f"date_{day.strftime('%Y-%m-%d')}"
        )
        keyboard.append([button])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:*",
                                    reply_markup=reply_markup, parse_mode="Markdown")

async def select_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    date_str = query.data.split("_")[1]
    context.user_data["date"] = date_str
    await show_time_picker(query, context)
    return TIME

async def show_time_picker(query, context):
    times = ["18:00", "19:00", "20:00", "21:00", "22:00"]
    keyboard = [[InlineKeyboardButton(t, callback_data=f"time_{t}")] for t in times]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("‚è∞ *–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:*",
                                  reply_markup=reply_markup, parse_mode="Markdown")

async def select_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    time_str = query.data.split("_")[1]
    context.user_data["time"] = time_str
    await query.edit_message_text(
        f"üìÖ –î–∞—Ç–∞: *{context.user_data['date']}*\n"
        f"‚è∞ –í—Ä–µ–º—è: *{context.user_data['time']}*",
        parse_mode="Markdown"
    )
"
                                  f"‚è∞ –í—Ä–µ–º—è: *{context.user_data['time']}*", parse_mode="Markdown")
    await query.message.reply_text("üìû *–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω?*\n_–ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å_", parse_mode="Markdown")
    return PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["phone"] = update.message.text
    booking = {
        "user_id": update.effective_user.id,
        "name": context.user_data["name"],
        "guests": context.user_data["guests"],
        "datetime": f"{context.user_data['date']} {context.user_data['time']}",
        "phone": context.user_data["phone"],
        "status": "‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏"
    }
    bookings.append(booking)
    save_bookings()

    text = (f"üì• *–ù–æ–≤–∞—è –±—Ä–æ–Ω—å!*\n"
            f"üë§ *–ò–º—è:* {booking['name']}\n"
            f"üë• *–ì–æ—Å—Ç–µ–π:* {booking['guests']}\n"
            f"üìÖ *–î–∞—Ç–∞/–≤—Ä–µ–º—è:* {booking['datetime']}\n"
            f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {booking['phone']}\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{len(bookings)-1}"),
         InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{len(bookings)-1}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id=ADMIN_ID, text=text, reply_markup=reply_markup, parse_mode="Markdown")

    await update.message.reply_text(
        "‚úÖ *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!*\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
        parse_mode="Markdown"
    )
    return ConversationHandler.END

def save_bookings():
    with open(BOOKINGS_FILE, "w", encoding="utf-8") as f:
        json.dump(bookings, f, ensure_ascii=False, indent=2)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    index = int(data.split("_")[1])
    booking = bookings[index]

    if data.startswith("accept"):
        booking["status"] = "‚úÖ –ü—Ä–∏–Ω—è—Ç–∞"
        text = "üéâ *–í–∞—à–∞ –±—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*\n–î–æ –≤—Å—Ç—Ä–µ—á–∏ –≤ –¢–∞–π–≥–∞ Family!"
    elif data.startswith("reject"):
        booking["status"] = "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞"
        text = "üòî *–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –±—Ä–æ–Ω—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.*"

    save_bookings()
    await context.bot.send_message(chat_id=booking["user_id"], text=text, parse_mode="Markdown")
    await query.edit_message_text(f"{query.message.text}\n\n*–°—Ç–∞—Ç—É—Å:* {booking['status']}", parse_mode="Markdown")

def main():
    app = Application.builder().token(BOT_TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("book", book)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            GUESTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_guests)],
            DATE: [CallbackQueryHandler(select_date, pattern="^date_")],
            TIME: [CallbackQueryHandler(select_time, pattern="^time_")],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)]
        },
        fallbacks=[]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(button_handler))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()